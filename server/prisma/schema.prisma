generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String

  telegram_id String? @unique

  firstName_telegram String?
  lastName_telegram  String?
  username_telegram  String?

  authCode          String?
  authCodeExpiresAt DateTime?

  schedule Schedule[]
  feedback Feedback[]
  api_key  String     @default(cuid())

  visits         Int @default(0)
  feedback_count Int @default(0)

  role String @default("USER")

  CreatedAt DateTime @default(now()) @map("created_at")
  UpdatedAt DateTime @updatedAt @map("updated_at")

  @@unique([api_key])
  @@map("user")
}

model Feedback {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String
  name    String @default("Анонимно")

  title          String
  text           String
  feedback_admin String?
  admin          String?

  isCheck Boolean @default(false)

  CreatedAt DateTime @default(now()) @map("created_at")
  UpdatedAt DateTime @updatedAt @map("updated_at")

  @@map("feedback")
}

model Schedule {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  title       String @default("Расписание")
  description String @default("Описание")

  cabinets String[]
  groups   String[]
  teachers Teacher[]

  isShow         Boolean? @default(true)
  schedule_count Int      @default(0)

  schedule     Json? @map("schedule_json")
  scheduleMain Json? @map("schedule_main")
  failed       Json? @map("failed")

  CreatedAt DateTime @default(now()) @map("created_at")
  UpdatedAt DateTime @updatedAt @map("updated_at")

  mapSubjects   MapSubject[]
  mapTeachers   MapTeacher[]
  amountLimits  AmountLimits[]
  limitCabinets LimitCabinets[]

  @@map("schedule")
}

model Teacher {
  tid         Int      @id @default(autoincrement())
  name        String
  schedule_id String
  schedule    Schedule @relation(fields: [schedule_id], references: [id])
}

model MapSubject {
  id         Int       @id @default(autoincrement())
  name_group String
  subjects   Subject[]
  scheduleId String?
  Schedule   Schedule? @relation(fields: [scheduleId], references: [id])
}

model Subject {
  id            Int        @id @default(autoincrement())
  name          String
  mapSubject    MapSubject @relation(fields: [mapSubject_id], references: [id])
  mapSubject_id Int
}

model MapTeacher {
  id         Int       @id @default(autoincrement())
  tid        Int
  subject    String
  group      String
  scheduleId String?
  Schedule   Schedule? @relation(fields: [scheduleId], references: [id])
}

model AmountLimits {
  id           Int       @id @default(autoincrement())
  group        String
  subject      String
  count        Int
  type_subject String
  scheduleId   String?
  Schedule     Schedule? @relation(fields: [scheduleId], references: [id])
}

model LimitCabinets {
  id         Int       @id @default(autoincrement())
  tid        Int
  cabinets   String[]
  scheduleId String?
  Schedule   Schedule? @relation(fields: [scheduleId], references: [id])
}
