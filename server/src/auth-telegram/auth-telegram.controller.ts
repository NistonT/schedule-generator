import { BadRequestException, Body, Controller, Post } from '@nestjs/common';
import { Auth } from 'src/auth/decorators/auth.decorators';
import { CurrentUser } from 'src/auth/decorators/user.decorators';
import { AuthTelegramService } from './auth-telegram.service';

@Controller('auth-telegram')
export class AuthTelegramController {
  constructor(private readonly authTelegramService: AuthTelegramService) {}

  // Telegram Webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏, –∞ –Ω–µ long-polling)
  @Post('webhook')
  handleWebhook(@Body() update: any) {
    this.authTelegramService.getBotInstance().handleUpdate(update);
    return { success: true };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–ª–∏ –≤—Ö–æ–¥–∞)
  @Post('verify')
  async verifyAuthCode(@Body() body: { authCode: string }) {
    const { authCode } = body;

    if (!authCode || authCode.length !== 5) {
      throw new BadRequestException('–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 —Ü–∏—Ñ—Ä');
    }

    const user = await this.authTelegramService.findUserByAuthCode(authCode);

    if (!user) {
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥',
      };
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await this.authTelegramService.clearLoginCode(user.telegram_id);

    return {
      success: true,
      telegram_id: user.telegram_id,
      message: '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω',
    };
  }

  // –ü—Ä–∏–º–µ—Ä: –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ telegram_id –∏ code
  @Auth()
  @Post('link')
  async linkTelegramAccount(
    @Body() body: { telegram_id: string; code: string },
    @CurrentUser('id') id: string,
  ) {
    const { telegram_id, code } = body;
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', body);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isValid = await this.authTelegramService.validateLoginCode(
      telegram_id,
      code,
    );

    if (!isValid) {
      return {
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –∫–æ–¥',
      };
    }

    try {
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.authTelegramService.linkTelegramToUser(id, telegram_id);

      return {
        success: true,
        message: 'Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É',
      };
    } catch (e) {
      return {
        success: false,
        message: e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ (–ø—Ä–∏–º–µ—Ä)
  @Post('notify-login')
  async notifyLogin(@Body() body: { telegram_id: string; deviceInfo: any }) {
    const { telegram_id, deviceInfo } = body;

    const user =
      await this.authTelegramService.findUserByTelegramId(telegram_id);

    if (!user) {
      return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    const message = `
üîî –í—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:
–ò–º—è: ${user.firstName_telegram || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
ID: ${user.telegram_id}
–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceInfo.deviceType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–ë—Ä–∞—É–∑–µ—Ä: ${deviceInfo.browser || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–û–°: ${deviceInfo.os || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceInfo.isMobile ? '–î–∞' : '–ù–µ—Ç'}
User-Agent: ${deviceInfo.userAgent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
`;

    await this.authTelegramService.notifyUserLogin(telegram_id, message);

    return { success: true, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
  }
}
